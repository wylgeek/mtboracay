${extends("/goframe/function_layout.httl")}
<!--#macro(content)-->
<div style="padding: 5px 5px 0px 5px;">
    <div id="form1" method="post">
        <input name="model" class="nui-hidden" value="${model}"/>
        <fieldset style="border:dotted 1px #227EA0;">
            <legend><span style="font-weight: bold">基础栏</span></legend>
            <table style="width:100%;height:100%;" cellpadding="5px,0px,5px,0px" class="nui-form-table">
                <tr>
                    <th class="nui-form-label"><label for="name">名称：</label></th>
                    <td>
                        <input id="name" name="name" class="nui-textbox" style="width: 97%" required="true"
                               vtype="maxLength:64" onvalidation="nameValidation"/>
                    </td>
                    <th class="nui-form-label"><label for="type">类型：</label></th>
                    <td>
                        <input id="type" name="type" class="nui-dictcombobox" valueField="dictId" textField="dictName"
                               dictTypeId="${model}_DS_TYPE" style="width:97%" onvaluechanged="typeChanged"
                               required="true"/>
                    </td>
                </tr>
                <tr>
                    <th class="nui-form-label"><label for="describe">说明：</label></th>
                    <td colspan="3">
                        <input id="describe" name="describe" class="nui-textbox" style="width:99%" required="true"
                               vtype="maxLength:256"/>
                    </td>
                </tr>
                <tr>
                    <th class="nui-form-label"><label for="implClass">接口实现类：</label></th>
                    <td colspan="3">
                        <input id="implClass" name="implClass" class="nui-textbox" style="width:99%"
                               vtype="maxLength:256"/>
                    </td>
                </tr>
                <tr>
                    <th class="nui-form-label"><label for="note">备注：</label></th>
                    <td colspan="3">
                        <input name="note" id="note" class="nui-textarea" style="height:60px; width:99%;"
                               vtype="maxLength:4000"/>
                    </td>
                </tr>
            </table>
        </fieldset>

        <fieldset style="border:dotted 1px #227EA0;">
            <legend><span style="font-weight: bold">配置栏</span></legend>
            <div style="padding: 5px 5px 0px 5px;">
                <div class="nui-toolbar" style="border-bottom: 0;">
                    <table style="width: 100%;">
                        <tr>
                            <td style="text-align: left;">
                                <b>配置参数</b>
                            </td>
                            <td style="text-align: right;">
                                <a class="nui-button" iconCls="icon-add" onclick="add">添加</a>
                                <a class="nui-button" iconCls="icon-add" onclick="adds">批量添加</a>
                                <a class="nui-button" iconCls="icon-remove" onclick="remove" enabled="false"
                                   id="remove">删除</a>
                                <span class="separator"></span>
                                <a class="nui-button" iconCls="icon-upload" onclick="moveUp" enabled="false"
                                   id="moveUp">上移</a>
                                <a class="nui-button" iconCls="icon-download" onclick="moveDown" enabled="false"
                                   id="moveDown">下移</a>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="nui-fit" style="height:200px; padding: 0px 5px 0px 5px;">
                <div id="datagrid1" class="nui-datagrid" style="width:100%; height: 100%;"
                     idField="pkId" multiSelect="true" allowCellEdit="true" allowCellSelect="true" sortMode="client"
                     showPager="false" editNextOnEnterKey="true" editNextRowCell="true" onselectionchanged="selected">
                    <div property="columns">
                        <div type="checkcolumn" headerAlign="center" width="5"></div>
                        <div type="indexcolumn" headerAlign="center" width="8">位置</div>
                        <div name="name" field="name" headerAlign="center" allowSort="true"
                             width="30">名称<font color="#FF0000">（必填）</font>
                            <input name="propsName" property="editor" class="nui-combobox"
                                   textField="dictId" valueField="dictId" allowInput="true"
                                   onbeforeshowpopup="propsNameBeforeShowPopup" vtype="maxLength:256" required="true"
                                   onvaluechanged="propsNameChanged" onvalidation="propsNameValidation"/>
                        </div>
                        <div name="value" field="value" headerAlign="center" allowSort="true" width="30">数值<font
                                color="#FF0000">（必填）</font>
                            <input property="editor" class="nui-textbox" vtype="maxLength:4000"/>
                        </div>
                        <div name="describe" field="describe" headerAlign="center" allowSort="true" width="40">说明
                            <input property="editor" class="nui-textbox" vtype="maxLength:4000"/>
                        </div>
                    </div>
                </div>
            </div>
        </fieldset>

        <div class="nui-toolbar" style="text-align:center;padding-top:10px;padding-bottom:5px;" borderStyle="border:0;">
            <a id="test" class="nui-button" iconCls="icon-ok" onclick="test">测试数据源</a>
            <span style="display:inline-block;width:25px;"></span>
            <a class="nui-button" style="" iconCls="icon-save" onclick="save" id="saveButton">保存</a>
            <span style="display:inline-block;width:25px;"></span>
            <a class="nui-button" style="" iconCls="icon-cancel" onclick="cancel">返回</a>
        </div>
    </div>
</div>

<script type="text/javascript">
    var form1;
    var grid1;
    var typeObj;

    /**
     * 按需加载资源文件
     */
    require(['jquery', 'nui'], function ($, nui) {
        nui.parse();
        form1 = new nui.Form("#form1");
        grid1 = nui.get("datagrid1");
        typeObj = nui.get("type");
    });

    /**
     * 选中
     */
    function selected() {
        var rows = grid1.getSelecteds();
        if (rows.length == 1) {
            nui.get("remove").enable();
            nui.get("moveUp").enable();
            nui.get("moveDown").enable();
        } else if (rows.length == 0) {
            nui.get("remove").disable();
            nui.get("moveUp").disable();
            nui.get("moveDown").disable();
        } else {
            nui.get("remove").enable();
            nui.get("moveUp").enable();
            nui.get("moveDown").enable();
        }
    }

    /**
     * 下拉框弹出前发生
     */
    var count = 0;
    function propsNameBeforeShowPopup(e) {
        // --下拉选项变化--
        if (count == 0) {
            e.source.load("${basePath}/goframe/dict/getDictData?dictTypeId=${model}_DS_PROPS_" + typeObj.value);
            count++;
        }
    }

    /**
     * 类型值变化时触发
     */
    function typeChanged(e) {
        count = 0;
        // --配置信息变化--
        grid1.clearRows();
        $.post("${basePath}/goframe/dict/getDictData?dictTypeId=${model}_DS_PROPS_" + typeObj.value, {}, function (data) {
            var props = [];
            if (data.length > 0) {
                for (var i = 0, len = data.length; i < len; i++) {
                    props.push({
                        "name": data[i].dictId,
                        "value": data[i].filter,
                        "describe": data[i].dictName
                    });
                }
            }
            grid1.addRows(props);
        });
    }

    /**
     * 参数名称变化时触发
     */
    function propsNameChanged(e) {
        // --同一行的值和说明变化--
        var selected = e.selected;
        var row = grid1.getSelected();
        row.describe = selected.dictName;
        row.value = selected.filter;
    }

    /**
     * 参数名称变化时触发检查
     */
    function propsNameValidation(e) {
        if (e.isValid) {
            var count = 0;
            var rows = grid1.getData(true, true);
            for (var i = 0, len = rows.length; i < len; i++) {
                if (e.value == rows[i].name) {
                    count++;
                }
                if (count == 1) {
                    e.errorText = "名称已存在";
                    e.isValid = false;
                    return false;
                }
            }
        }
    }

    /**
     * 添加
     */
    function add() {
        var rows = grid1.getData(true, true);
        var length = rows.length;
        var newRow = {name: ""};
        grid1.addRow(newRow, length);
    }

    /**
     * 批量添加
     */
    function adds() {
        nui.open({
            url: "${basePath}/goframe/p/com.ds.multi?dictTypeId=${model}_DS_PROPS_" + typeObj.value,
            title: "批量添加",
            width: 650,
            height: 380,
            onload: function () {
                var data = grid1.getData(true, true);
                var iframe = this.getIFrameEl();
                var props = [];
                if (data.length > 0) {
                    for (var i = 0, len = data.length; i < len; i++) {
                        props.push({"name": data[i].name});
                    }
                }
                iframe.contentWindow.SetData(props);
            },
            ondestroy: function (action) {
                if (action == "success") {
                    var iframe = this.getIFrameEl();
                    var result = iframe.contentWindow.GetData();
                    result = nui.clone(result);
                    grid1.addRows(result);
                }
            }
        });
    }

    /**
     * 删除
     */
    function remove() {
        var rows = grid1.getSelecteds();
        if (rows.length > 0) {
            grid1.removeRows(rows, true);
        } else {
            nui.alert("请至少选中一条记录!");
        }
    }

    /**
     * 保存
     */
    function save() {
        var saveData = getSaveData();
        if (!saveData) {
            return;
        }
        var json = nui.encode(saveData);
        // --发送信息--
        form1.loading("正在保存中,请稍等...");
        //禁用保存按钮
        nui.get("saveButton").disable();
        $.ajax({
            url: "${basePath}/com/ds/insert",
            type: 'POST',
            data: json,
            cache: false,
            contentType: 'application/json',
            success: function (result) {
                if (result.status == true) {
                    nui.alert(result.message);
                    CloseWindow("success");
                } else {
                    nui.alert(result.message, "系统提示", function (action) {
                        if (action == "ok" || action == "close") {
                            CloseWindow("failed");
                        }
                    });
                }
                form1.unmask();
                //解除保存按钮禁用
                nui.get("saveButton").enable();
            }
        });
    }

    /**
     * 获取需要保存的数据
     */
    function getSaveData() {
        var baseData = getBaseData();
        if (!baseData) {
            return;
        }
        var propsData = getPropsData();
        if (!propsData) {
            return;
        }
        var saveData = {
            "comDatasource": baseData,
            "comPropertiesList": propsData
        };
        //console.warn(saveData);
        return saveData;
    }

    /**
     * 获取基础数据
     */
    function getBaseData() {
        form1.validate();
        if (form1.isValid() == false) {
            return;
        }
        var baseData = form1.getData(true, true);
        return baseData;
    }

    /**
     * 获取配置参数数据
     */
    function getPropsData() {
        var status = true;
        var propsData = grid1.getData(true, true);
        if (propsData == null || propsData.length == 0) {
            nui.alert("【配置参数】的信息不能为空!");
            return;
        }
        $.each(propsData, function (_index, record) {
            record.seq = grid1.indexOf(record) + 1;
            if (record.name == null || record.name == "") {
                nui.alert("【配置参数】的位置" + record.seq + "：【名称】不能为空!");
                status = false;
                return false;
            }
            if (checkPropsName(record.name) == false) {
                nui.alert("【配置参数】的位置" + record.seq + "：【名称】只能包含字母、数字、下划线、点、中划线，且以字母开头!");
                status = false;
                return false;
            }
            if (record.value == null || record.value == "") {
                nui.alert("【配置参数】的位置" + record.seq + "：【数值】不能为空!");
                status = false;
                return false;
            }
        });
        if (!status) {
            return;
        }
        // 检查参数重复
        if (checkRepetition(propsData)) {
            nui.alert("【配置参数】中存在重复【名称】，请检查后再提交！");
            return;
        }
        return propsData;
    }

    /**
     * 检查参数列表是否重复
     */
    function checkRepetition(propsData) {
        //算法1、遍历
        var repetFlg = false;
        $.each(propsData, function (_index, record) {
            var repetCount = 0;
            $.each(propsData, function (i, item) {
                if (record.name == item.name) {
                    repetCount++;
                }
            });
            if (repetCount > 1) {
                repetFlg = true;
            }
        });
        //算法2、构造Map类型集合，以record.name为key，插入到map集合中，
        //集合中长度小于原来的长度,则存在重复
        return repetFlg;
    }

    /**
     * 名称变化时触发检查
     */
    function nameValidation(e) {
        if (e.isValid) {
            if (checkPattern(e.value) == false) {
                e.errorText = "只能包含字母、数字、下划线，且以字母开头";
                e.isValid = false;
            }
            var result = isExist(e.value);
            if (result.status) {
                e.errorText = "名称已存在";
                e.isValid = false;
            }
        }
    }

    /**
     * 检查是否满足字母、数字、下划线，且以字母开头
     */
    function checkPattern(v) {
        var re = new RegExp("^[A-Za-z][A-Za-z0-9_]{0,63}$");
        if (re.test(v)) {
            return true;
        }
        return false;
    }

    /**
     * 检查是否满足字母、数字、下划线、点、中划线，且以字母开头
     */
    function checkPropsName(v) {
        var re = new RegExp("^[A-Za-z][A-Za-z0-9_\.\-]{0,256}$");
        if (re.test(v)) {
            return true;
        }
        return false;
    }

    /**
     * 检查是否存在
     */
    function isExist(value) {
        //debugger;
        var result = "";
        $.ajax({
            url: "${basePath}/com/ds/check/${model}/" + value,
            type: 'POST',
            cache: false,
            async: false,
            contentType: 'application/json',
            success: function (text) {
                result = text;
            }
        });
        return result;
    }

    /**
     * 返回
     */
    function cancel() {
        CloseWindow("onCancel");
    }

    /**
     * 选中项上移
     */
    function moveUp() {
        //debugger;
        var rows = grid1.getSelecteds();
        grid1.moveUp(rows);
    }

    /**
     * 选中项下移
     */
    function moveDown() {
        //debugger;
        var rows = grid1.getSelecteds();
        grid1.moveDown(rows);
    }

    /**
     *连接测试
     */
    function test() {
        var saveData = getSaveData();
        if (!saveData) {
            return;
        }
        var json = nui.encode(saveData);
        // --发送信息--
        form1.loading("正在测试中,请稍等...");
        $.ajax({
            url: "${basePath}/http/ds/test",
            type: 'POST',
            data: json,
            cache: false,
            contentType: 'application/json',
            success: function (result) {
                form1.unmask();
                nui.alert(result.message);
            }
        });
    }
</script>
<!--#end-->