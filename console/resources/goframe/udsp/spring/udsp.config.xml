<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:hdp="http://www.springframework.org/schema/hadoop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task.xsd
       http://cxf.apache.org/jaxws
       http://cxf.apache.org/schemas/jaxws.xsd
       http://www.springframework.org/schema/hadoop
       http://www.springframework.org/schema/hadoop/spring-hadoop.xsd">

    <context:component-scan base-package="com.hex.bigdata.udsp"/>

    <!-- ==================================== EhCache =====================================-->
    <!-- cacheManager工厂类，指定ehcache.xml的位置 -->
    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="${ehcache.path}"/>
        <property name="shared" value="true"/>
    </bean>

    <!-- 声明cacheManager -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" >
        <property name="CacheManager" ref="cacheManagerFactory"/>
    </bean>

    <!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
    <!--<cache:annotation-driven cache-manager="cacheManager"/>-->


    <!-- ==================================== Redis =====================================-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${redis.host}" p:port="${redis.port}" p:poolConfig-ref="jedisPoolConfig"
    />
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
        </property>
    </bean>

    <!-- ==================================== WebService =====================================-->
    <!-- JAX-WS -->
    <!--<bean id="wsServer" class="org.springframework.remoting.support.SimpleHttpServerFactoryBean">-->
        <!--<property name="port" value="9087"/>-->
    <!--</bean>-->
    <!--<bean class="org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter">-->
        <!--<property name="server" ref="wsServer"/>-->
        <!--<property name="basePath" value="/udsp/"/>-->
    <!--</bean>-->

    <!-- CXF -->
    <import resource="classpath:META-INF/cxf/cxf.xml" />
    <import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
    <bean id="wsServiceBean" class="com.hex.bigdata.udsp.controller.WebServiceController"/>
    <bean id="inInterceptor" class="org.apache.cxf.interceptor.LoggingInInterceptor"/>
    <bean id="outInterceptor" class="org.apache.cxf.interceptor.LoggingOutInterceptor"/>
    <jaxws:server serviceClass="com.hex.bigdata.udsp.controller.WebServiceInterface" address="/ws">
        <jaxws:serviceBean>
            <ref bean="wsServiceBean"/>
        </jaxws:serviceBean>
        <jaxws:inInterceptors>
            <ref bean="inInterceptor"/>
        </jaxws:inInterceptors>
        <jaxws:outInterceptors>
            <ref bean="outInterceptor"/>
        </jaxws:outInterceptors>
    </jaxws:server>

    <!-- ==================================== Task =====================================-->
    <task:annotation-driven/>

    <!-- ==================================== AOP =====================================-->
    <aop:aspectj-autoproxy/>

    <!-- ==================================== Quartz =====================================-->
    <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序  -->
    <bean id="scheduler" lazy-init="true" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"></bean>



    <bean id="paramService" class="com.hex.bigdata.udsp.ed.connect.service.ParamService">
        <property name="udspStorePrefix" value="${udsp.store.prefix}"></property>

        <property name="hbaseDataFamily" value="${hbase.data.family}"></property>
        <property name="hbaseDataColumn" value="${hbase.data.column}"></property>
        <property name="hbaseParamColumn" value="${hbase.param.column}"></property>
    </bean>

    <!--hadoop配置-->
    <!--配置hadoop基本信息-->
    <hdp:configuration id="hadoopConfiguration">
        fs.default.name="${hd.fs}"
    </hdp:configuration>

    <!--配置zookeeper地址和端口-->
    <hdp:hbase-configuration id="hbaseConfiguration" configuration-ref="hadoopConfiguration"
                             zk-quorum="${hbase.zk.quorum}" zk-port="${hbase.zk.port}"/>

    <!--配置HbaseTemplate-->
    <bean id="hbaseTemplate" class="org.springframework.data.hadoop.hbase.HbaseTemplate">
        <property name="configuration" ref="hbaseConfiguration"/>
        <property name="encoding" value="UTF-8"/>
    </bean>

</beans>