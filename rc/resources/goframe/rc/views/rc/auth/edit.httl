${extends("/goframe/function_layout.httl")}
<!--#macro(content)-->
<div style="padding: 5px 5px 0px 5px;">
    <div id="form1" method="post">
        <input name="pkId" class="nui-hidden"/>
        <input name="delFlg" class="nui-hidden"/>
        <input name="crtUser" class="nui-hidden"/>
        <input name="crtTime" class="nui-hidden"/>
        <input name="uptUser" class="nui-hidden"/>
        <input name="uptTime" class="nui-hidden"/>
        <fieldset style="border:dotted 1px #227EA0;">
            <legend><span style="font-weight: bold">基础栏</span></legend>
            <table style="width:100%;height:100%;" cellpadding="5px,0px,5px,0px" class="nui-form-table">
                <tr>
                    <th class="nui-form-label"><label for="serviceType">应用类型：</label></th>
                    <td>
                        <input id="serviceType" name="serviceType" class="nui-dictcombobox nui-form-input"
                               style="width: 97%;" emptyText="请选择应用类型" onvaluechanged="selectServices"
                               valueField="dictId" textField="dictName" dictTypeId="UDSP_SERVICE_TYPE" required="true"/>
                    </td>
                    <th class="nui-form-label"><label for="serviceId">服务名称：</label></th>
                    <td>
                        <div id="serviceId" class="nui-combobox" style="width:97%;" popupWidth="400" textField="name"
                             valueField="pkId"
                             dataField="data" name="serviceId" multiSelect="false" allowInput="true" required="true"
                             onvaluechanged="showSelectUsers">
                            <div property="columns">
                                <div header="名称" field="name"></div>
                                <div header="说明" field="describe"></div>
                            </div>
                        </div>
                        <!--<input id="serviceId" name="serviceId"class="nui-combobox" style="width: 97%;"  emptyText="请选择服务名称"
                               valueField="pkId" textField="name" required="true" onvaluechanged="showSelectUsers"/>-->
                    </td>
                </tr>
                <tr>
                    <th class="nui-form-label"><label for="userId">用户：</label></th>
                    <td colspan="3">
                        <input id="userId" name="userId" class="nui-lookup" allowInput="false" popupWidth="450px;"
                               textField="userName" valueField="userId"
                               popup="#gridPanel" grid="#serachGrid" style="width: 99%;" emptyText="请选择用户"
                               required="true"/>

                        <div id="gridPanel" class="nui-panel" title="header" iconCls="icon-add"
                             style="width: 100%;height: 250px"
                             showToolbar="true" showCloseButton="true" showHeader="false" bodyStyle="padding:0"
                             borderStyle="border:0">
                            <div property="toolbar" style="padding: 5px;padding-left:8px;text-align: center">
                                <span>用户名</span>
                                <input id="keyText" class="nui-textbox" style="width: 160px" onenter="onSearchClick">
                                <a class="nui-button" onclick="onSearchClick">Search</a>
                            </div>

                            <div id="serachGrid" class="nui-datagrid" style="width:100%;height:100%;"
                                 pageStyle="padding:2px;" multiSelect="true" idField="id" sortMode="client"
                                 url="${basePath}/rc/userService/selectNotRelationUsers"
                                 showPageSize="true" showPageIndex="true" sizeList="[10,20,40,80,160]" pageSize="20">
                                <div property="columns">
                                    <div type="checkcolumn"></div>
                                    <div field="userId" with="180" headerAlign="center" allowSort="true">用户ID</div>
                                    <div field="userName" with="180" headerAlign="center" allowSort="true">用户名</div>
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
                <tr>
                    <th class="nui-form-label"><label for="ipSection">ip段：</label></th>
                    <td colspan="3">
                        <input id="ipSection" class="nui-textarea" style="height:60px; width:99%;"
                               emptyText="默认不拦截,支持模式，1、固定IP，如196.1.26.3；2、*号代替，如196.1.26.*、*.*.*.*；3、IP段范围196.1.*.[8,9-26]、196.1.26.[1-5,9-26]"/>
                    </td>
                </tr>
                <tr>
                    <th class="nui-form-label"><label for="maxSyncNum">运行队列大小（同步）：</label></th>
                    <td>
                        <input id="maxSyncNum" name="maxSyncNum" class="nui-textbox" style="width:97%" required="true"
                               value="100" vtype="range:-1,9999999999" emptyText="-1：表示运行队列无穷大"/>
                    </td>
                    <th class="nui-form-label"><label for="maxAsyncNum">运行队列大小（异步）：</label></th>
                    <td>
                        <input id="maxAsyncNum" name="maxAsyncNum" class="nui-textbox" style="width:97%" required="true"
                               value="50" vtype="range:-1,9999999999" emptyText="-1：表示运行队列无穷大"/>
                    </td>
                </tr>
                <tr>
                    <th class="nui-form-label"><label for="maxSyncWaitNum">等待队列大小（同步）：</label></th>
                    <td>
                        <input id="maxSyncWaitNum" name="maxSyncWaitNum" class="nui-textbox" style="width:97%"
                               required="true" value="0" value="0" vtype="range:0,9999999999" emptyText="0：表示关闭等待队列"/>
                    </td>
                    <th class="nui-form-label"><label for="maxAsyncWaitNum">等待队列大小（异步）：</label></th>
                    <td>
                        <input id="maxAsyncWaitNum" name="maxAsyncWaitNum" class="nui-textbox" style="width:97%"
                               required="true" value="0" value="0" vtype="range:0,9999999999" emptyText="0：表示关闭等待队列"/>
                    </td>
                </tr>
                <tr>
                    <th class="nui-form-label"><label for="maxSyncExecuteTimeout">运行超时时间（同步/单位：秒）：</label></th>
                    <td>
                        <input id="maxSyncExecuteTimeout" name="maxSyncExecuteTimeout" class="nui-textbox"
                               style="width:97%" vtype="range:0,9999999999" emptyText="0或空：表示使用系统默认的运行超时时间"/>
                    </td>
                    <th class="nui-form-label"><label for="maxAsyncExecuteTimeout">运行超时时间（异步/单位：秒）：</label></th>
                    <td>
                        <input id="maxAsyncExecuteTimeout" name="maxAsyncExecuteTimeout" class="nui-textbox"
                               style="width:97%" vtype="range:0,9999999999" emptyText="0或空：表示使用系统默认的运行超时时间"/>
                    </td>
                </tr>
                <tr>
                    <th class="nui-form-label"><label for="maxSyncWaitTimeout">等待超时时间（同步/单位：秒）：</label></th>
                    <td>
                        <input id="maxSyncWaitTimeout" name="maxSyncWaitTimeout" class="nui-textbox" style="width:97%"
                               vtype="range:0,9999999999" emptyText="0或空：表示使用系统默认的等待超时时间"/>
                    </td>
                    <th class="nui-form-label"><label for="maxAsyncWaitTimeout">等待超时时间（异步/单位：秒）：</label></th>
                    <td>
                        <input id="maxAsyncWaitTimeout" name="maxAsyncWaitTimeout" class="nui-textbox" style="width:97%"
                               vtype="range:0,9999999999" emptyText="0或空：表示使用系统默认的等待超时时间"/>
                    </td>
                </tr>
                <tr>
                    <th class="nui-form-label"><label for="alarmType">告警方式：</label></th>
                    <td>
                        <input id="alarmType" name="alarmType" class="nui-dictcombobox" valueField="dictId"
                               textField="dictName"
                               dictTypeId="RC_ALARM_TYPE" style="width:97%" onvaluechanged="alarmTypeChanged"
                               required="true" value="NONE"/>
                    </td>
                </tr>
            </table>
        </fieldset>

        <fieldset style="border:dotted 1px #227EA0;">
            <legend><span style="font-weight: bold">配置栏</span></legend>
            <div style="padding: 5px 5px 0px 5px;">
                <div class="nui-toolbar" style="border-bottom: 0;">
                    <table style="width: 100%;">
                        <tr>
                            <td style="text-align: left;">
                                <b>配置参数</b>
                            </td>
                            <td style="text-align: right;">
                                <a class="nui-button" iconCls="icon-add" onclick="add">添加</a>
                                <a class="nui-button" iconCls="icon-add" onclick="adds">批量添加</a>
                                <a class="nui-button" iconCls="icon-remove" onclick="remove" enabled="false"
                                   id="remove">删除</a>
                                <span class="separator"></span>
                                <a class="nui-button" iconCls="icon-upload" onclick="moveUp" enabled="false"
                                   id="moveUp">上移</a>
                                <a class="nui-button" iconCls="icon-download" onclick="moveDown" enabled="false"
                                   id="moveDown">下移</a>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="nui-fit" style="height:200px; padding: 0px 5px 0px 5px;">
                <div id="datagrid1" class="nui-datagrid" style="width:100%; height: 100%;" dataField="data"
                     idField="pkId" multiSelect="true" allowCellEdit="true" allowCellSelect="true" sortMode="client"
                     showPager="false" editNextOnEnterKey="true" editNextRowCell="true" onselectionchanged="selected"
                     url="${basePath}/com/props/select/${pkId}">
                    <div property="columns">
                        <div type="checkcolumn" headerAlign="center" width="5"></div>
                        <div type="indexcolumn" headerAlign="center" width="8">位置</div>
                        <div name="name" field="name" allowSort="true" width="30">名称<font color="#FF0000">（必填）</font>
                            <input property="editor" class="nui-combobox" textField="dictId"
                                   valueField="dictId" name="propsName" allowInput="true"
                                   onbeforeshowpopup="propsNameBeforeShowPopup" vtype="maxLength:256" required="true"
                                   onvaluechanged="propsNameChanged" onvalidation="propsNameValidation"/>
                        </div>
                        <div name="value" field="value" headerAlign="center" allowSort="true" width="30">数值<font
                                color="#FF0000">（必填）</font>
                            <input property="editor" class="nui-textbox" vtype="maxLength:4000"/>
                        </div>
                        <div name="describe" field="describe" headerAlign="center" allowSort="true" width="40">说明
                            <input property="editor" class="nui-textbox" vtype="maxLength:4000"/>
                        </div>
                    </div>
                </div>
            </div>
        </fieldset>

        <div class="nui-toolbar" style="text-align:center;padding-top:10px;padding-bottom:5px;" borderStyle="border:0;">
            <a class="nui-button" style="" iconCls="icon-save" onclick="save" id="saveButton">保存</a>
            <span style="display:inline-block;width:25px;"></span>
            <a class="nui-button" style="" iconCls="icon-cancel" onclick="cancel">返回</a>
        </div>
    </div>
</div>

<script type="text/javascript">
    var form1;
    var grid1;
    var userId_nuiObject;
    var serviceId_nuiObject;
    var serachGrid;
    var originServiceId;
    var originUserId;
    var serviceType_nuiObject;
    var orginRelationUsers;
    var orginUserObject;
    var alarmTypeObj;
    /**
     * 按需加载资源文件
     */
    require(['jquery', 'nui'], function ($, nui) {
        nui.parse();
        form1 = new nui.Form("#form1");
        grid1 = nui.get("datagrid1");
        grid1.load();
        userId_nuiObject = nui.get("userId");
        serviceId_nuiObject = nui.get("serviceId");
        serachGrid = nui.get("serachGrid");
        serviceType_nuiObject = nui.get("serviceType");
        userId_nuiObject = nui.get("userId");
        alarmTypeObj = nui.get("alarmType");
        var isOnlyReady = '${isOnlyReady}';
        if (isOnlyReady && isOnlyReady == '1') {  //当isOnlyReady等于"1"时，表示值是从服务注册传过来，使应用类型不能做修改
            serviceId_nuiObject.setEnabled(false);
            serviceType_nuiObject.setEnabled(false);
        }
        setData();

        var rcUserServiceView = {};
        rcUserServiceView.serviceIds = originServiceId;
        var userName;
        //debugger;
        serachGrid.load(rcUserServiceView, function () {
            getOriginUserInfo();
            var gridData = serachGrid.data;
            gridData.push({'userId': orginUserObject.userId, 'userName': orginUserObject.userName});
            serachGrid.setData(gridData);
            var rows = serachGrid.findRows(function (row) {
                if (row.userId == originUserId) {
                    userName = row.userName;
                    return true;
                }
            });
            serachGrid.selects(rows);
            userId_nuiObject.setValue(originUserId);
            userId_nuiObject.setText(userName);
        });

    });

    /**
     * 读取详情
     */
    function setData() {
        $.ajax({
            url: "${basePath}/rc/userService/select/${pkId}",
            type: 'POST',
            cache: false,
            async: false,
            contentType: 'application/json',
            success: function (text) {
                if (text.status) {
                    //debugger;
                    var obj = text.data;
                    form1.setData(obj);
                    form1.setChanged(false);
                    originServiceId = obj.serviceId;
                    originUserId = obj.userId;
                    serachGrid.load();
                    selectServicesInit();
                }
            }
        });
    }

    /**
     * lookup 下拉搜索
     */
    function onSearchClick() {
        var keyText = nui.get("keyText").getValue();
        //debugger;
        var serviceId = serviceId_nuiObject.getValue();
        if (serviceId == null || serviceId == "") {
            nui.alert("请先选择服务！");
            return;
        }
        var rcUserServiceView = {};
        rcUserServiceView.serviceIds = serviceId;
        rcUserServiceView.userName = keyText;
        serachGrid.setUrl("${basePath}/rc/userService/selectNotRelationUsers");
        serachGrid.load(rcUserServiceView);
        var gridData = serachGrid.data;

        if (serviceId == originServiceId) {
            gridData.push({'userId': orginUserObject.userId, 'userName': orginUserObject.userName})
        }
        serachGrid.setData(gridData);
        console.log(gridData);


    }

    /**
     * 获取基础数据
     */
    function getBaseData() {
        form1.validate();
        if (form1.isValid() == false) {
            return;
        }
        var baseData = form1.getData(true, true);
        if (!baseData) {
            return;
        }
        //检查并发数是否合法
        if (baseData.maxSyncNum < 0 || baseData.maxAsyncNum < 0) {
            nui.alert("最大异步/同步并发数不能小于0！");
            return;
        }
        //检查用户服务关系唯一性
        var flg = checkExists(baseData.userId, baseData.serviceId);
        if (flg) {
            nui.alert("对应的用户-服务关系已经存在！");
            return;
        }
        //检查IP段是否合法
        var ipSection = nui.get("ipSection").getValue();
        var ipFlg = true;
        if (ipSection != null && ipSection != "") {
            ipFlg = checkModel(ipSection);
        }
        if (!ipFlg) {
            nui.alert("IP段表达式不合法");
            return;
        }
        return baseData;
    }

    /**
     * 获取配置参数数据
     */
    function getPropsData() {
        var status = true;
        var propsData = grid1.getData(true, true);
        $.each(propsData, function (_index, record) {
            record.seq = grid1.indexOf(record) + 1;
            if (record.name == null || record.name == "") {
                nui.alert("【配置参数】的位置" + record.seq + "：【名称】不能为空!");
                status = false;
                return false;
            }
            if (checkPropsName(record.name) == false) {
                nui.alert("【配置参数】的位置" + record.seq + "：【名称】只能包含字母、数字、下划线、点、中划线，且以字母开头!");
                status = false;
                return false;
            }
            if (record.value == null || record.value == "") {
                nui.alert("【配置参数】的位置" + record.seq + "：【数值】不能为空!");
                status = false;
                return false;
            }
        });
        if (!status) {
            return;
        }
        // 检查参数重复
        if (checkRepetition(propsData)) {
            nui.alert("【配置参数】中存在重复【名称】，请检查后再提交！");
            return;
        }
        return propsData;
    }

    /**
     * 获取需要保存的数据
     */
    function getSaveData() {
        var baseData = getBaseData();
        if (!baseData) {
            return;
        }
        var propsData = getPropsData();
        if (!propsData) {
            return;
        }
        var saveData = {
            "rcUserService": baseData,
            "comPropertiesList": propsData
        };
        //console.warn(saveData);
        return saveData;
    }

    /**
     * 保存
     */
    function save() {
        var saveData = getSaveData();
        if (!saveData) {
            return;
        }
        var json = nui.encode(saveData);
        // --发送信息--
        form1.loading("正在保存中,请稍等...");
        //禁用保存按钮
        nui.get("saveButton").disable();
        $.ajax({
            url: "${basePath}/rc/userService/update",
            type: 'POST',
            data: json,
            cache: false,
            contentType: 'application/json',
            success: function (result) {
                if (result.status == true) {
                    nui.alert(result.message);
                    CloseWindow("success");
                } else {
                    nui.alert(result.message, "系统提示", function (action) {
                        if (action == "ok" || action == "close") {
                            CloseWindow("failed");
                        }
                    });
                }
                form1.unmask();
                //解除保存按钮禁用
                nui.get("saveButton").enable();
            }
        });
    }

    function checkExists(userId, serviceId) {
        if (userId == originUserId && serviceId == originServiceId)
            return false;
        var flg = false;
        $.ajax({
            url: "${basePath}/rc/userService/checkExists/" + userId + "/" + serviceId,
            type: 'POST',
            cache: false,
            async: false,
            contentType: 'application/json',
            success: function (result) {
                if (result.status) {
                    flg = result.data;
                } else {
                    nui.alert(result.message);
                }
            }
        });
        return flg;
    }

    /**
     * 检查IP段是否合法
     */
    function checkModel(ipSection) {
        var rcUserServiceView = {};
        rcUserServiceView.ipSection = ipSection;
        var json = nui.encode(rcUserServiceView);
        var flg;
        $.ajax({
            url: "${basePath}/rc/userService/checkModel/",
            type: 'POST',
            cache: false,
            async: false,
            data: json,
            contentType: 'application/json',
            success: function (result) {
                if (result.status) {
                    flg = result.data;
                } else {
                    nui.alert(result.message);
                }
            }
        });
        return flg;
    }

    /**
     * 选择服务
     */
    function selectServices(e) {
        serviceId_nuiObject.setValue("");
        $.ajax({
            url: "${basePath}/rc/service/selectServices/" + e.value,
            type: 'POST',
            cache: false,
            contentType: 'application/json',
            success: function (result) {
                if (result.status) {
                    serviceId_nuiObject.setData(result.data);
                }
            }
        });
    }

    function selectServicesInit() {
        //debugger;
        var value = serviceType_nuiObject.getValue();
        serviceId_nuiObject.setValue("");
        $.ajax({
            url: "${basePath}/rc/service/selectServices/" + value,
            type: 'POST',
            cache: false,
            contentType: 'application/json',
            success: function (result) {
                if (result.status) {
                    serviceId_nuiObject.setData(result.data);
                    serviceId_nuiObject.setValue(originServiceId);
                }
            }
        });
    }

    function showSelectUsers() {
        debugger;
        var serviceId = serviceId_nuiObject.getValue();
        if (serviceId == null || serviceId == "") {
            nui.alert("请先选择服务！");
            return;
        }
        var rcUserServiceView = {};
        rcUserServiceView.serviceIds = serviceId;
        serachGrid.setUrl("${basePath}/rc/userService/selectNotRelationUsers");
        serachGrid.load(rcUserServiceView);
        var gridData = serachGrid.data;

        if (serviceId == originServiceId) {
            gridData.push({'userId': orginUserObject.userId, 'userName': orginUserObject.userName})
            userId_nuiObject.setValue(orginUserObject.userId);
            userId_nuiObject.setText(orginUserObject.userName);
        } else {
            userId_nuiObject.setValue("");
            userId_nuiObject.setText("");
        }

        serachGrid.setData(gridData);
        console.log(gridData);
    }

    /**
     * 获取初始的用户信息
     */
    function getOriginUserInfo() {
        //获取与服务关联的全部用户信息
        //debugger;
        getUserByServiceId();
        $.each(orginRelationUsers, function (index, item) {
            //console.log(index);
            //console.log(item);
            if (originUserId == item.userId) {
                orginUserObject = item;
                //orginRelationUsers.pop(item);
            }
        });


    }

    //获取与服务关联的全部用户信息
    function getUserByServiceId() {
        var rcUserServiceView = {};
        rcUserServiceView.serviceIds = originServiceId;
        //console.log(rcUserServiceView);
        var json = nui.encode(rcUserServiceView);
        //console.log(json);
        $.ajax({
            url: "${basePath}/rc/userService/selectRelationUsers",
            type: 'POST',
            data: json,
            cache: false,
            async: false,
            contentType: 'application/json',
            success: function (text) {
                orginRelationUsers = text.data;
            }
        });
    }

    /**
     * 返回
     */
    function cancel() {
        CloseWindow("onCancel");
    }

    /**
     * 告警方式值变化时触发
     */
    function alarmTypeChanged(e) {
        count = 0;
        // --配置信息变化--
        grid1.clearRows();
        $.post("${basePath}/goframe/dict/getDictData?dictTypeId=RC_ALARM_PROPS_" + alarmTypeObj.value, {}, function (data) {
            var props = [];
            if (data.length > 0) {
                for (var i = 0, len = data.length; i < len; i++) {
                    props.push({
                        "name": data[i].dictId,
                        "value": data[i].filter,
                        "describe": data[i].dictName
                    });
                }
            }
            grid1.addRows(props);
        });
    }

    /**
     * 选中
     */
    function selected() {
        var rows = grid1.getSelecteds();
        if (rows.length == 1) {
            nui.get("remove").enable();
            nui.get("moveUp").enable();
            nui.get("moveDown").enable();
        } else if (rows.length == 0) {
            nui.get("remove").disable();
            nui.get("moveUp").disable();
            nui.get("moveDown").disable();
        } else {
            nui.get("remove").enable();
            nui.get("moveUp").enable();
            nui.get("moveDown").enable();
        }
    }

    /**
     * 下拉框弹出前发生
     */
    var count = 0;
    function propsNameBeforeShowPopup(e) {
        // --下拉选项变化--
        if (count == 0) {
            e.source.load("${basePath}/goframe/dict/getDictData?dictTypeId=RC_ALARM_PROPS_" + alarmTypeObj.value);
            count++;
        }
    }

    /**
     * 参数名称变化时触发
     */
    function propsNameChanged(e) {
        // --同一行的值和说明变化--
        var selected = e.selected;
        var row = grid1.getSelected();
        row.describe = selected.dictName;
        row.value = selected.filter;
    }

    /**
     * 参数名称变化时触发检查
     */
    function propsNameValidation(e) {
        if (e.isValid) {
            var count = 0;
            var rows = grid1.getData(true, true);
            for (var i = 0, len = rows.length; i < len; i++) {
                if (e.value == rows[i].name) {
                    count++;
                }
                if (count == 1) {
                    e.errorText = "名称已存在";
                    e.isValid = false;
                    return false;
                }
            }
        }
    }

    /**
     * 添加
     */
    function add() {
        var rows = grid1.getData(true, true);
        var length = rows.length;
        var newRow = {name: ""};
        grid1.addRow(newRow, length);
    }

    /**
     * 批量添加
     */
    function adds() {
        nui.open({
            url: "${basePath}/goframe/p/com.ds.multi?dictTypeId=RC_ALARM_PROPS_" + alarmTypeObj.value,
            title: "批量添加",
            width: 650,
            height: 380,
            onload: function () {
                var data = grid1.getData(true, true);
                var iframe = this.getIFrameEl();
                var props = [];
                if (data.length > 0) {
                    for (var i = 0, len = data.length; i < len; i++) {
                        props.push({"name": data[i].name});
                    }
                }
                iframe.contentWindow.SetData(props);
            },
            ondestroy: function (action) {
                if (action == "success") {
                    var iframe = this.getIFrameEl();
                    var result = iframe.contentWindow.GetData();
                    result = nui.clone(result);
                    grid1.addRows(result);
                }
            }
        });
    }

    /**
     * 删除
     */
    function remove() {
        var rows = grid1.getSelecteds();
        if (rows.length > 0) {
            grid1.removeRows(rows, true);
        } else {
            nui.alert("请至少选中一条记录!");
        }
    }

    /**
     * 选中项上移
     */
    function moveUp() {
        var rows = grid1.getSelecteds();
        grid1.moveUp(rows);
    }

    /**
     * 选中项下移
     */
    function moveDown() {
        var rows = grid1.getSelecteds();
        grid1.moveDown(rows);
    }

    /**
     * 检查是否满足字母、数字、下划线、点、中划线，且以字母开头
     */
    function checkPropsName(v) {
        var re = new RegExp("^[A-Za-z][A-Za-z0-9_\.\-]{0,256}$");
        if (re.test(v)) {
            return true;
        }
        return false;
    }

    /**
     * 检查参数列表是否重复
     */
    function checkRepetition(propsData) {
        //算法1、遍历
        var repetFlg = false;
        $.each(propsData, function (_index, record) {
            var repetCount = 0;
            $.each(propsData, function (i, item) {
                if (record.name == item.name) {
                    repetCount++;
                }
            });
            if (repetCount > 1) {
                repetFlg = true;
            }
        });
        //算法2、构造Map类型集合，以record.name为key，插入到map集合中，
        //集合中长度小于原来的长度,则存在重复
        return repetFlg;
    }
</script>
<!--#end-->